{"version":3,"sources":["components/TestList.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["Main","styled","div","Header","header","List","Button","button","TestList","type","App","className","Boolean","window","location","hostname","match","reducer","state","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y8CAIA,IAAMA,EAAOC,IAAOC,IAAV,KAOJC,EAASF,IAAOG,OAAV,KAeNC,EAAOJ,IAAOC,IAAV,KAaJI,EAASL,IAAOM,OAAV,KAaG,SAASC,IAetB,OACE,kBAACR,EAAD,KACE,kBAACG,EAAD,KACE,kBAACG,EAAD,CAAQG,KAAK,UAAb,mBACA,0CAEF,6CACA,kBAACJ,EAAD,eC5DSK,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACH,EAAD,QCGcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCZSC,MANf,SAAiBC,GAEb,OAAOA,G,yBCYLC,EAAQC,YACVH,EACAI,YAAgBC,IAAOC,MAG3BC,IAASC,OAEL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,IAAD,KACI,kBAAC,EAAD,QAIRO,SAASC,eAAe,SFsGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f34a0ad3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Main = styled.div`\r\n  margin: 0 auto;\r\n  width: 100%;\r\n  height: 568px;\r\n  background: #e7757d;\r\n`;\r\n\r\nconst Header = styled.header`\r\n  margin: 0 auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  justify-content: space-evenly;\r\n  align-items: center;\r\n  width: 70%;\r\n  height: 65px;\r\n  background: #c2cad0;\r\n  mix-blend-mode: normal;\r\n  border: 3px solid #7e685a;\r\n  box-sizing: border-box;\r\n  border-radius: 15px;\r\n`;\r\n\r\nconst List = styled.div`\r\n  margin: 0 auto;\r\n  width: 47%;\r\n  height: 95px;\r\n\r\n  background: #c2cad0;\r\n  border: 3px solid #7e685a;\r\n  box-sizing: border-box;\r\n  box-shadow: 0px 4px 25px rgba(0, 0, 0, 0.25);\r\n  border-radius: 15px;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  background: #c2b9b0;\r\n  border: 2px solid #7e685a;\r\n  box-sizing: border-box;\r\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\r\n  border-radius: 25px;\r\n  padding: 0.5%;\r\n  font-family: \"Gill Sans\", \"Gill Sans MT\", Calibri, \"Trebuchet MS\", sans-serif;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n  margin-left: 2%;\r\n`;\r\n\r\nexport default function TestList() {\r\n  //   const [test, getTest] = useState;\r\n\r\n  //   useEffect(() => {\r\n  //     axios\r\n  //       .get(``)\r\n  //       .then(response => {\r\n  //         console.log(response.data.results);\r\n  //         getTest(response.data.results);\r\n  //       })\r\n  //       .catch(error => {\r\n  //         console.error(error);\r\n  //       });\r\n  //   }, []);\r\n\r\n  return (\r\n    <Main>\r\n      <Header>\r\n        <Button type=\"submit\">Create New Test</Button>\r\n        <h2>Test List</h2>\r\n      </Header>\r\n      <h2>Current Tests</h2>\r\n      <List>Tests</List>\r\n    </Main>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Login from \"./components/LoginPage\";\r\nimport \"./App.css\";\r\nimport Register from \"./components/Register\";\r\nimport TestList from \"./components/TestList\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TestList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","function reducer(state) {\r\n\r\n    return state;\r\n\r\n}\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n//wrap provider\r\nimport { createStore, applyMiddleware, } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport reducer from './reducers/index';\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(\r\n    reducer,\r\n    applyMiddleware(thunk, logger)\r\n);\r\n\r\nReactDOM.render(\r\n\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App />\r\n        </Router>\r\n    </Provider>,\r\n\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}